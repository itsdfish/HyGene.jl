"""
    create_prototypes(context_labels::Vector{Symbol}, hypothesis_labels::Vector{Symbol},
                      n_features::Integer=15, focal_sim::Number=0.0)

Creates a series of prototypes. First, a focal prototype is produced. Next, alternative hypothesis
prototypes are generated with the features copied from the focal prototype with probability `focal_sim`.
Labels are added to the prototypes and constituent [`Context`](@ref) objects.

# Arguments

  - `context_labels::Vector{Symbol}`: A list of labels (of type `Symbol`) for the generated contexts within prototypes, i.e., one for each context.
  - `hypothesis_labels::Vector{Symbol}`: A list of labels (of type `Symbol`) for the generated prototypes/hypotheses, i.e., one for each object.
  - `n_features::Integer`: Number of features in each [`Context`](@ref) minivector.
  - `focal_sim::Number=0.0`: Degree of similarity between the focal hypothesis and alternative hypotheses. Set to no (`0.0`) similarity by default.

"""
function create_prototypes(
    context_labels::Vector{Symbol},
    hypothesis_labels::Vector{Symbol},
    n_features::Integer = 15,
    focal_sim::Number = 0.0,
)
    # Create focal hypothesis
    focal_contexts = Vector{Context}()
    for label in context_labels
        desc = string(label) * "_1"
        new_context = Context(label, desc, n_features)
        push!(focal_contexts, new_context)
    end
    focal_prototype = MemoryTrace(
        hypothesis_labels[1],
        string(hypothesis_labels[1]) * " hypothesis",
        focal_contexts,
    )

    # Replicate the focal hypothesis
    alt_prototypes = Vector{MemoryTrace}()
    for alt = 2:length(hypothesis_labels)
        new_alt = trace_replication(focal_prototype, focal_sim)
        new_alt.label = hypothesis_labels[alt]
        new_alt.description = string(hypothesis_labels[alt]) * " hypothesis"
        for (context, c_label) in zip(new_alt.contents, context_labels)
            context.label = c_label
            context.description = string(c_label) * "_" * string(alt)
        end
        push!(alt_prototypes, new_alt)
    end
    return vcat([focal_prototype], alt_prototypes)
end


"""
    create_prototypes(n_contexts::Integer, n_hypotheses::Integer, n_features::Integer=15, 
                    focal_sim::Number=0.0)

Prototype creation script in the case where labels are not given by the user. In this case, labels are automatically
generated by the program and added to the hypothesis/prototype objects.

# Arguments

  - `n_contexts::Integer`: The number of [`Context`](@ref) objects within each hypothesis object.
  - `n_hypotheses::Integer`: The number of hypotheses to be generated.
  - `n_features::Integer`: Number of features in each [`Context`](@ref) minivector.
  - `focal_sim::Number=0.0`: Degree of similarity between the focal hypothesis and alternative hypotheses. Set to no (`0.0`) similarity by default.

"""
function create_prototypes(
    n_contexts::Integer,
    n_hypotheses::Integer,
    n_features::Integer = 15,
    focal_sim::Number = 0.0,
)
    # Create labels
    context_labels = create_labels(n_contexts, "context_")
    hypothesis_labels = create_labels(n_hypotheses, "hypothesis_")
    # Pass to higher function
    create_prototypes(context_labels, hypothesis_labels, n_features, focal_sim)
end


"""
    create_labels(n_labels::Integer, label::String)

Creates generic labels. For use with [`create_prototypes`](@ref).

# Arguments

  - `n_labels::Integer`: The desired number of labels to be generated.
  - `label::String`: A generic label to prepend other identifying data.

# Example

```jldoctest
julia> create_labels(2, "example")
2-element Vector{Symbol}:
 :example1
 :example2
```

"""
function create_labels(n_labels::Integer, label::String)
    return [Symbol(label * string(i)) for i = 1:n_labels]
end


"""
    create_traces(prototypes::Vector{MemoryTrace}, n_trace_vec::Vector{<:Number},
                  encode_fidelity::Number=0.75)

Generates [`MemoryTrace`](@ref) objects to be written to [`LongTermMemory`](@ref). Each trace 
is copied from a prototype with similarity equal to `encode_fidelity`. The number of copies of each
prototype is set by a vector of integers (`n_trace_vec`).

# Arguments

  - `prototypes::Vector{MemoryTrace}`: List of prototypes to be copied into [`LongTermMemory`](@ref).
  - `n_trace_vec::Vector{<:Number}`: A vector of numbers indicating how many times each prototype should be copied. For example, 3 prototypes could be copied with frequencies `[2,4,2]` each.
  - `encode_fidelity::Number=0.75`: The degree to which traces should match their respective prototypes.

"""
function create_traces(
    prototypes::Vector{MemoryTrace},
    n_trace_vec::Vector{<:Number},
    encode_fidelity::Number = 0.75,
)
    traces = Vector{MemoryTrace}()
    for (proto, n) in zip(prototypes, n_trace_vec)
        [push!(traces, trace_replication(proto, encode_fidelity)) for _ = 1:n]
    end
    return traces
end

"""
    create_traces(prototypes::Vector{MemoryTrace}, n_traces::Integer,
                  encode_fidelity::Number=0.75)

Generates [`MemoryTrace`](@ref) objects to be written to [`LongTermMemory`](@ref). Each trace 
is copied from a prototype with similarity equal to `encode_fidelity`. Each prototype is 
copied `n_traces` times.

# Arguments

- `prototypes::Vector{MemoryTrace}`: List of prototypes to be copied into [`LongTermMemory`](@ref).
- `n_traces::Number`: The number of copies of each prototype.
- `encode_fidelity::Number=0.75`: The degree to which traces should match their respective prototypes.

"""
function create_traces(
    prototypes::Vector{MemoryTrace},
    n_traces::Integer,
    encode_fidelity::Number = 0.75,
)
    n_trace_vec = ones(length(prototypes)) * n_traces
    create_traces(prototypes, n_trace_vec, encode_fidelity)
end


"""
    create_observation(prototype::MemoryTrace, d_obs_sim::Number=0.85)

Generates an observation from the real world, i.e., [`ObsTrace`](@ref). Each observation 
is copied from a prototype with similarity equal to `d_obs_sim`.

# Arguments

  - `prototype::MemoryTrace`: Prototype to be copied.
  - `d_obs_sim::Number=0.85`: Degree to which the observation matches the prototype.

"""
function create_observation(prototype::MemoryTrace, d_obs_sim::Number = 0.85)
    proto_copy = trace_replication(prototype, d_obs_sim)
    return ObsTrace(proto_copy.label, proto_copy.description, proto_copy.contents)
end
